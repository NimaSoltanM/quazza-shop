// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // Use string type for role
  reviews       Review[]
  accounts      Account[]
  Cart          Cart[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  price       Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  inStock   Boolean
  shipping  String?
  reviews   Review[]
  CartItem  CartItem[]
}

model Review {
  id Int @id @default(autoincrement())

  likes    Int     @default(0)
  dislikes Int     @default(0)
  rating   Int // 1-5
  comment  String?
  username String

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?
}

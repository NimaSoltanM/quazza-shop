// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // Use string type for role
  accounts      Account[]

  addresses Address[]
  cart      Cart[]
  orders    Order[]
  wishlist  Wishlist[]
  reviews   Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id      String  @id @default(cuid())
  userId  String
  name    String?
  street1 String
  street2 String?
  city    String
  state   String
  zip     String
  country String
  User    User    @relation(fields: [userId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  digitId     String
  items       OrderItem[]
  total       Int
  deliveredAt DateTime?
  status      String
  createdAt   DateTime    @default(now())
  User        User        @relation(fields: [userId], references: [id])
}

model OrderItem {
  id        String  @id @default(cuid())
  productId String // Relation to Product
  name      String
  price     Int
  quantity  Int
  order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Wishlist {
  id     String         @id @default(cuid())
  userId String // Relation to User
  items  WishlistItem[]
  User   User           @relation(fields: [userId], references: [id])
}

model WishlistItem {
  id         String   @id @default(cuid())
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
  addedAt    DateTime @default(now())
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id])
  wishlistId String

  @@unique([productId, wishlistId])
}

model Category {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String?

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  imageUrl    String
  price       Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  inStock      Boolean
  shipping     String?
  reviews      Review[]
  CartItem     CartItem[]
  WishlistItem WishlistItem[]
}

model Review {
  id Int @id @default(autoincrement())

  likes    Int     @default(0)
  dislikes Int     @default(0)
  rating   Int // 1-5
  comment  String?
  username String

  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  createdAt DateTime @default(now())

  userId String?
  User   User?   @relation(fields: [userId], references: [id])
}

model Cart {
  id        String   @id @default(cuid())
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]
  User  User?      @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  cart   Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId String?
}
